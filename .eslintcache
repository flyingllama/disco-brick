[{"/Users/j/www/disco-brick/src/App.js":"1","/Users/j/www/disco-brick/src/utils/coloredBt.js":"2","/Users/j/www/disco-brick/src/components/sequenceListItem.component.js":"3","/Users/j/www/disco-brick/src/components/sequenceList.component.js":"4","/Users/j/www/disco-brick/src/utils/bt.js":"5"},{"size":1806,"mtime":1611007727832,"results":"6","hashOfConfig":"7"},{"size":3077,"mtime":1611007651883,"results":"8","hashOfConfig":"7"},{"size":266,"mtime":1611005703349,"results":"9","hashOfConfig":"7"},{"size":437,"mtime":1611006166372,"results":"10","hashOfConfig":"7"},{"size":1689,"mtime":1611005187518,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hw25oe",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":8,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":null},"98ii3z","/Users/j/www/disco-brick/src/App.js",[],"/Users/j/www/disco-brick/src/utils/coloredBt.js",[],"/Users/j/www/disco-brick/src/components/sequenceListItem.component.js",[],"/Users/j/www/disco-brick/src/components/sequenceList.component.js",[],"/Users/j/www/disco-brick/src/utils/bt.js",["23","24","25","26","27","28","29","30"],{"ruleId":"31","severity":2,"message":"32","line":5,"column":26,"nodeType":"33","messageId":"34","endLine":25,"endColumn":4,"fix":"35"},{"ruleId":"36","severity":2,"message":"37","line":24,"column":14,"nodeType":"38","messageId":"39","endLine":24,"endColumn":25},{"ruleId":"36","severity":2,"message":"37","line":29,"column":5,"nodeType":"38","messageId":"39","endLine":29,"endColumn":16},{"ruleId":"40","severity":2,"message":"41","line":38,"column":44,"nodeType":"33","messageId":"42"},{"ruleId":"43","severity":2,"message":"44","line":41,"column":12,"nodeType":"45","messageId":"39","endLine":43,"endColumn":6,"fix":"46"},{"ruleId":"47","severity":2,"message":"48","line":52,"column":12,"nodeType":"49","messageId":"50","endLine":52,"endColumn":51},{"ruleId":"31","severity":2,"message":"32","line":56,"column":32,"nodeType":"33","messageId":"34","endLine":58,"endColumn":6,"fix":"51"},{"ruleId":"52","severity":2,"message":"53","line":57,"column":23,"nodeType":"49","messageId":"54","endLine":57,"endColumn":24},"arrow-body-style","Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","ArrowFunctionExpression","unexpectedSingleBlock",{"range":"55","text":"56"},"no-console","Unexpected console statement.","MemberExpression","unexpected","consistent-return","Expected to return a value at the end of async arrow function.","missingReturn","no-else-return","Unnecessary 'else' after 'return'.","BlockStatement",{"range":"57","text":"58"},"no-return-await","Redundant use of `await` on a return value.","Identifier","redundantUseOfAwait",{"range":"59","text":"60"},"no-unused-vars","'_' is defined but never used.","unusedVar",[97,752],"navigator.bluetooth\n      .requestDevice({\n        acceptAllDevices: true,\n        optionalServices: [0xffe5],\n      })\n      .then(device => device.gatt.connect())\n      .then(server => server.getPrimaryService(0xffe5))\n      .then(service => service.getCharacteristic(0xffe9))\n      .then(characteristic => {\n        const { device } = characteristic.service;\n\n        if (!this.stripMap.has(device.id)) {\n          this.stripMap.set(device.id, characteristic);\n          device.addEventListener('gattserverdisconnected', () => this.onDisconnect(device.id));\n        }\n\n        return characteristic;\n      })\n      .catch(console.log)",[1111,1277],"async (strip, msg) => {\n    if (msg.length <= 20) {\n      return strip.writeValueWithoutResponse(msg);\n    } \n      this.writeLongMessage(strip, msg);\n    \n  }",[1599,1665],"acc.then(_ => this.writeMessage(strip, msg))"]